diff --git a/sshd.c b/sshd.c
index ba26287..a233e3f 100644
--- a/sshd.c
+++ b/sshd.c
@@ -557,8 +557,10 @@ privsep_preauth_child(void)
 		debug3("privsep user:group %u:%u", (u_int)privsep_pw->pw_uid,
 		    (u_int)privsep_pw->pw_gid);
 		gidset[0] = privsep_pw->pw_gid;
+#ifndef __PASE__
 		if (setgroups(1, gidset) < 0)
 			fatal("setgroups: %.100s", strerror(errno));
+#endif
 		permanently_set_uid(privsep_pw);
 	}
 }
@@ -1939,6 +1941,18 @@ main(int ac, char **av)
 	/* Reinitialize the log (because of the fork above). */
 	log_init(__progname, options.log_level, options.log_facility, log_stderr);
 
+#ifdef __PASE__
+	struct {
+		int bytesProvided;
+		int bytesAvailable;
+		char msgID[7];
+		char reserved;
+	} errorCode;
+	errorCode.bytesProvided=sizeof(errorCode);
+	errorCode.bytesAvailable = 0;
+	QWTCHGJB(1, &errorCode); /* 1 == change job server type to sshd */
+#endif
+
 	/* Chdir to the root directory so that the current disk can be
 	   unmounted if desired. */
 	if (chdir("/") == -1)
@@ -1973,6 +1987,40 @@ main(int ac, char **av)
 				fprintf(f, "%ld\n", (long) getpid());
 				fclose(f);
 			}
+#ifdef __PASE__
+			/* Make sure the sshd.pid file is only world readable */
+			if (chmod(options.pid_file, (mode_t) 0644) < 0) {
+				error("Couldn't chmod pid file \"%s\": %s", options.pid_file, strerror(errno));
+			}
+
+
+			/* 
+			  On i5/OS also record our pid in /QOpenSys/QIBM/UserData/SC1/OpenSSH/etc/sshd.pid
+			  for QSC101SRVR server start/end program to find the right pid
+			  and also allow user to change location of pid file above without
+			  having to add logic to QSC101SRVR to parse the options file.
+
+			  Only do this when started with STRTCPSVR - we use debug_flag and
+			  ports_from_cmdline as flags indicative of a "manual" (not STRTCPSVR)
+			  invocation 
+			*/
+			if (!debug_flag && !options.ports_from_cmdline) {
+#define I5OS_PIDFILE SSHDIR "/sshd.pid"
+		                f = fopen(I5OS_PIDFILE, "w");
+
+				if (f == NULL) {
+					error("Couldn't create pid file \"%s\": %s", I5OS_PIDFILE, strerror(errno));
+				} else {
+					/* Make sure the sshd.pid file is only world readable */
+					if (chmod(I5OS_PIDFILE, (mode_t) 0644) < 0) {
+						error("Couldn't chmod pid file \"%s\": %s", I5OS_PIDFILE, strerror(errno));
+					}
+
+					fprintf(f, "%ld\n", (long) getpid());
+					fclose(f);
+				}
+			} /* create I5OS_PIDFILE */
+#endif
 		}
 
 		/* Accept a connection and return in a forked child */
